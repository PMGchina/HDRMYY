server:
  contextPath: /hdrmyy
  port: 8080
  session:
    timeout: 3600 # 单位为秒
    cookie:
      max-age: 3600
  tomcat.max-threads: 0
  tomcat.uri-encoding: UTF-8

# spring.datasource.* 此部分属性由DruidConfiguration文件读取并配置，所有结构与命名都已与该类紧密捆绑
spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    url: jdbc:mysql://localhost:3306/hdrmyy?characterEncoding=utf-8&useSSL=true
    username: hdrmyy
    password: hdrmyy
    driverClassName: com.mysql.jdbc.Driver
    # 初始化大小，最小，最大
    initialSize: 5
    minIdle: 5
    maxActive: 20
    # 配置获取连接等待超时的时间
    maxWait: 60000
    # 连接超过时间限制是否回收
    removeAbandoned: false
    # 超时时间，单位为秒
    removeAbandonedTimeout: 1800
    # 关闭abanded连接时输出错误日志
    logAbandoned: true
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 300000
    # 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用
    validationQuery: SELECT 1
    # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效
    # 建议配置为true，不影响性能，并且保证安全性
    testWhileIdle: true
    # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
    testOnBorrow: true
    # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    # 配置监控统计拦截的filters，'stat'去掉后监控界面sql无法统计，'wall'用于防火墙(包括防注入功能，where 1=1会抛异常)，'slf4j'用于打印druid数据源与连接池相关sql
    filters: stat
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    # 合并多个DruidDataSource的监控数据
    useGlobalDataSourceStat: true
  jpa:
    database: MYSQL
    show-sql: true
    hibernate:
      ddl-auto: update
      naming:
        strategy: org.hibernate.cfg.ImprovedNamingStrategy
      use-new-id-generator-mappings: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5Dialect
    generate-ddl: true
  mvc:
    view:
      prefix: /WEB-INF/views/
      suffix: .jsp
    static-path-pattern: /static/**
  cache:
    cache-names: es
    ehcache:
      config: classpath:ehcache.xml
  mail:
    host: smtp.sina.com
    username: xxxxxxxxxx@sina.com # 需根据具体情况进行修改，使用任何邮箱前都应该确认已经开启其POP3/SMTP服务
    password: xxxxxxxxxx          # 需根据具体邮件账号进行修改
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true

logging:
  config: classpath:logback-spring.xml

project:
  component:
    ckfinder:
      # WEB-INF/classes/下图片存储路径
      # <image>标签中src部分路径(完整路径:server.contextPath + project.component.ckfinder.uploadImagePath)
      uploadImagePath: static/userfiles/images/
      # MB
      maxImageSize: 2
    qrcode:
      # 二维码宽度，如果不设置，默认400
      width: 200
      # 二维码高度，如果不设置，默认400
      height: 200
      # 边框宽度，数字越大，边框越大
      margin: 0
      # 生成的二维码格式
      suffix: .png
      # 默认附带图片相对路径
      defaultImage: /static/image/logo_qrcode.png
      # 反转白色与黑色
      reversalColor: false
  business:
    user:
      photoPath: D://hdrmyy//userfiles//user-photo
    content:
      imagePath: D://hdrmyy//userfiles//content-image
  base:
    datasource:
      type: com.alibaba.druid.pool.DruidDataSource
      url: jdbc:mysql://localhost:3306/frontend?characterEncoding=utf-8&useSSL=true
      username: hdrmyyfront
      password: hdrmyyfront
      driverClassName: com.mysql.jdbc.Driver
    jpa:
      database: MYSQL
      generate-ddl: true
    repository:
      factory: com.beamofsoul.springboot.management.repository.BaseMultielementRepositoryFactory
      batch:
        size: 30
    security:
      # Specifies the URLs to be required to login as the roles "adminRoles" matched
      adminRoleMatchers:
       - /admin/**
      # Any one of the roles to require for adminRoleMatchers
      # Each of the roles should not start with "ROLE_" as this is automatically inserted
      # 只有角色ADMIN 和 MANAGER 可以访问后台
      adminRoles:
        - ADMIN
        - MANAGER
        - NORMAL
      # Allows adding RequestMatcher instances that do not to be required to login
      nonAuthenticatedMatchers:
        - /**
      # Specifies the URL to send users to if login is required
      loginPage: /login
      # Specifies where users will go after authenticating successfully
      defaultLoginSuccessUrl: /
      # true if the defaultSuccesUrl should be used after authentication despite
      # if a protected page had been previously visited
      alwaysUseDefaultSuccessUrl: true
      # The URL that will invoke logout
      logoutUrl: /logout
      # The URL to redirect to after logout has occurred.
      # The default is "/login?logout".
      defaultLogoutSuccessUrl: /index
      # Controls the maximum number of sessions for a user.
      # The default is to allow any number of users.
      maximumSessions: 1
      # If true, prevents a user from authenticating when the maximumSessions(int) has been reached.
      # Otherwise (default), the user who authenticates is allowed access
      # and an existing user's session is expired.
      # The user's who's session is forcibly expired is sent to expiredUrl(String).
      # The advantage of this approach is if a user accidentally does not log out,
      # there is no need for an administrator to intervene or wait till their session expires.
      maxSessionsPreventsLogin: false
      # The URL to redirect to if a user tries to access a resource
      # and their session has been expired due to too many sessions for the current user.
      expiredUrl: /expired
      # Allows specifying how long (in seconds) a token is valid for, set as one week, defualt is two weeks
      tokenValiditySeconds: 604800
      # The HTTP parameter used to indicate to remember the user at time of login.
      rememberMeParameter: remember-me
      # The name of cookie which store the token for remember me authentication.
      # Defaults to 'remember-me'.
      rememberMeCookieName: hdrmyy
      # Allows adding RequestMatcher instances that should that Spring Security should ignore.
      # Web Security provided by Spring Security (including the SecurityContext)
      # will not be available on HttpServletRequest that match.
      # Typically the requests that are registered should be that of only static resources.
      # For requests that are dynamic, consider mapping the request to allow all users instead.
      ignoringMatchers:
        - /static/**
        - /**/favicon.ico
